<GlobalChangeSpec 
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:xsd="http://www.w3.org/2001/XMLSchema"
    xmlns="bb_appfx_globalchange"
    ID="e5592e6b-8e76-4b57-8a2a-0ca3b5781841"
    Name="Add any constituent attribute w/ start date"
    Description="Adds an attribute to a constituent record with start date"
    Author="HEIFERNET\khamling"
    SPName="USR_USP_GLOBALCHANGE_ADDCONSTITUENTATTRIBUTE_WITHSTARTDATE"
    DisplayName="Add any constituent attribute with start date Test"
    DisplayNameResourceKey="$$add_any_constituent_attribute_with_start_date"
    GlobalChangeFolder="Constituent"
    GlobalChangeFolderResourceKey="$$constituent"
    >
    <DependencyList xmlns="bb_appfx_commontypes">
      <Dependency CatalogAssembly="Blackbaud.AppFx.ConstituentGroups.Catalog.dll" CatalogItem="Blackbaud.AppFx.ConstituentGroups.Catalog.Household.Add.xml" />
      <Dependency CatalogAssembly="Blackbaud.AppFx.ConstituentGroups.Catalog.dll" CatalogItem="Blackbaud.AppFx.ConstituentGroups.Catalog.Group.Add.xml" />
    </DependencyList>
    <ImpliedSecurityList xmlns="bb_appfx_commontypes">
      <ImpliedSecurity Type="Datalist" ID="15c44580-593b-494d-9b6f-940d6b87f9ce" />
      <ImpliedSecurity Type="SimpleDataList" ID="ea2c8565-85cb-433c-94f8-229e079f0445" />
    </ImpliedSecurityList>
    <InstalledProductList xmlns="bb_appfx_commontypes">
      <InstalledProduct ID="3117d2c8-7f46-42f2-abeb-b654f2f63046" />
      <InstalledProduct ID="42c15648-749e-4859-a56d-3a6474814cc7" />
      <InstalledProduct ID="6f77d512-d0d1-444f-9b46-b8603a6fe5f1" />
    </InstalledProductList>
    <ResourceFile AssemblyName="Blackbaud.AppFx.Constituent.Catalog.dll" ClassName="Blackbaud.AppFx.Constituent.Catalog.AddConstituentAttribute.GlobalChange" />
    <CreateProcedureSQL>

      create procedure dbo.USR_USP_GLOBALCHANGE_ADDCONSTITUENTATTRIBUTE_WITHSTARTDATE
      (
      @IDSETREGISTERID uniqueidentifier = null,
      @ATTRIBUTECATEGORYID uniqueidentifier,
      @STRINGVALUE nvarchar(250) = null,
      @NUMBERVALUE int = null,
      @MONEYVALUE money = null,
      @DATEVALUE datetime = null,
      @BOOLEANVALUE bit = null,
      @CODETABLEVALUE uniqueidentifier = null,
      @FUZZYDATEVALUE udt_fuzzydate = null,
      @CONSTITUENTIDVALUE uniqueidentifier = null,
      @HOURMINUTEVALUE udt_hourminute = null,
      @MEMOVALUE nvarchar(max) = null,
      @COMMENT nvarchar(255) = null,
      @STARTDATE datetime = null,
      @REMOVEUNQUALIFIED bit,
      @OVERWRITEEXISTINGVALUE bit,
      @CHANGEAGENTID uniqueidentifier = null,
      @ASOF as datetime = null,
      @NUMBERADDED int = 0 output,
      @NUMBEREDITED int = 0 output,
      @NUMBERDELETED int = 0 output,
      @CURRENTAPPUSERID uniqueidentifier = null,
      @CURRENCYID uniqueidentifier = null
      )
      as
      set nocount off;

      declare @DATATYPE int
      declare @ATTRIBUTETABLENAME nvarchar(128)
      declare @INSERTSQL nvarchar(max)
      declare @UPDATESQL nvarchar(max)
      declare @PARAMETERDEFINITION nvarchar(500)
      declare @CURRENTDATE datetime
      declare @ONEPERRECORD bit
      declare @VALUECOLUMNNAME nvarchar(128)

      set @NUMBERADDED = 0;
      set @NUMBEREDITED = 0;
      set @NUMBERDELETED = 0;
      set @UPDATESQL = '';

      declare @BYPASSSECURITY bit;
      declare @BPID uniqueidentifier;
      declare @BYPASSSITESECURITY bit;
      declare @SECURITYCLAUSE nvarchar(max);
      declare @MULTIPLEATTRIBUTESECURITYCLAUSE nvarchar(max);
      declare @SECURITYPARAMETERS nvarchar(500);

      set @BPID = '3269A1D1-31CB-4D28-945C-B7623A3EFCCA';
      set @CURRENTDATE = getdate();

      if @CURRENCYID is null
      set @CURRENCYID = dbo.UFN_CURRENCY_GETORGANIZATIONCURRENCY();

      exec dbo.USP_SECURITY_APPUSER_BYPASSSECURITYFORBUSINESSPROCESS @CURRENTAPPUSERID, @BPID, @BYPASSSECURITY output, @BYPASSSITESECURITY output;

      set @SECURITYPARAMETERS = ', @CURRENTAPPUSERIDPARAMETER uniqueidentifier, @BPIDPARAMETER uniqueidentifier, @BYPASSSECURITYPARAMETER bit, @BYPASSSITESECURITYPARAMETER bit'

      set @SECURITYCLAUSE = '
      left join dbo.UFN_SECURITY_APPUSER_GRANTED_CONSTITIDS_FORBUSINESSPROCESS(@CURRENTAPPUSERIDPARAMETER, @BPIDPARAMETER) as CONSTIT_RACS on SELECTEDCONSTITUENT.ID = CONSTIT_RACS.ID
      where
      (@BYPASSSECURITYPARAMETER = 1 or CONSTIT_RACS.ID is not null)
      and
      (
      @BYPASSSITESECURITYPARAMETER = 1 or
      exists
      (
      select 1
      from dbo.CONSTITUENT
      left join dbo.CONSTITUENTSITE on CONSTITUENTSITE.CONSTITUENTID = CONSTITUENT.ID
      where CONSTITUENT.ID = SELECTEDCONSTITUENT.ID
      and dbo.UFN_SECURITY_APPUSER_GRANTED_BUSINESSPROCESS_FORSITE(@CURRENTAPPUSERIDPARAMETER, @BPIDPARAMETER, CONSTITUENTSITE.SITEID) = 1
      )
      )
      ';

      set @MULTIPLEATTRIBUTESECURITYCLAUSE = '
      left join dbo.UFN_SECURITY_APPUSER_GRANTED_CONSTITIDS_FORBUSINESSPROCESS(@CURRENTAPPUSERIDPARAMETER, @BPIDPARAMETER) as CONSTIT_RACS on SELECTEDCONSTITUENT.CONSTITUENTID = CONSTIT_RACS.ID
      where
      (@BYPASSSECURITYPARAMETER = 1 or CONSTIT_RACS.ID is not null)
      and
      (
      @BYPASSSITESECURITYPARAMETER = 1 or
      exists
      (
      select 1
      from dbo.CONSTITUENT
      left join dbo.CONSTITUENTSITE on CONSTITUENTSITE.CONSTITUENTID = CONSTITUENT.ID
      where CONSTITUENT.ID = SELECTEDCONSTITUENT.CONSTITUENTID
      and dbo.UFN_SECURITY_APPUSER_GRANTED_BUSINESSPROCESS_FORSITE(@CURRENTAPPUSERIDPARAMETER, @BPIDPARAMETER, CONSTITUENTSITE.SITEID) = 1
      )
      )
      ';

      if @CHANGEAGENTID is null begin
      exec dbo.USP_CHANGEAGENT_GETORCREATECHANGEAGENT @CHANGEAGENTID output;
      end

      select
      @DATATYPE = ATTRIBUTECATEGORY.DATATYPECODE,
      @ATTRIBUTETABLENAME = TABLECATALOG.TABLENAME,
      @ONEPERRECORD = ATTRIBUTECATEGORY.ONLYALLOWONEPERRECORD,
      @VALUECOLUMNNAME = ATTRIBUTECATEGORY.VALUECOLUMNNAME
      from
      dbo.ATTRIBUTECATEGORY
      inner join dbo.TABLECATALOG on TABLECATALOG.ID = ATTRIBUTECATEGORY.TABLECATALOGID
      where
      ATTRIBUTECATEGORY.ID = @ATTRIBUTECATEGORYID;

      set @PARAMETERDEFINITION = '@STARTDATEPARAMETER datetime, @COMMENTPARAMETER nvarchar(255), @CHANGEAGENTIDPARAMETER uniqueidentifier, @CURRENTDATEPARAMETER datetime';
      if @DATATYPE = 3
      set @PARAMETERDEFINITION = '@CURRENCYIDPARAMETER uniqueidentifier, ' + @PARAMETERDEFINITION;

      declare @SELECTIONTABLESQL nvarchar(200);
      declare @SELECTION nvarchar(43);
      set @SELECTION = '';

      if @IDSETREGISTERID is not null begin
      declare @IDSETPARAMETERDEFINITION nvarchar(500);
      set @IDSETPARAMETERDEFINITION = '@IDSETREGISTERIDPARAMETER uniqueidentifier';

      select @SELECTION = '##SELECTION' + replace(cast(newid() as nvarchar(36)),'-','')

      set @SELECTIONTABLESQL = 'create table ' + @SELECTION + '(ID UNIQUEIDENTIFIER NOT NULL PRIMARY KEY)';
      exec sp_executesql @SELECTIONTABLESQL;

      declare @IDSETREGISTERSQL nvarchar(max);

      --retrieve records from the selection based on whether or not the user should bypass security
      if @BYPASSSECURITY = 0 or @BYPASSSITESECURITY = 0
      begin
      set @IDSETPARAMETERDEFINITION = '@IDSETREGISTERIDPARAMETER uniqueidentifier' + @SECURITYPARAMETERS;

      --insert records from the selection for which the user has rights
      set @IDSETREGISTERSQL = 'insert into ' + @SELECTION + '(ID) select SELECTEDCONSTITUENT.ID from dbo.UFN_IDSETREADER_GETRESULTS_GUID(@IDSETREGISTERIDPARAMETER) SELECTEDCONSTITUENT ' + @SECURITYCLAUSE;
      exec sp_executesql @IDSETREGISTERSQL, @IDSETPARAMETERDEFINITION, @IDSETREGISTERIDPARAMETER = @IDSETREGISTERID, @CURRENTAPPUSERIDPARAMETER = @CURRENTAPPUSERID, @BPIDPARAMETER = @BPID, @BYPASSSECURITYPARAMETER = @BYPASSSECURITY, @BYPASSSITESECURITYPARAMETER = @BYPASSSITESECURITY;
      end
      else
      begin
      --insert all records from the selection
      set @IDSETREGISTERSQL = 'insert into ' + @SELECTION + '(ID) select ID from dbo.UFN_IDSETREADER_GETRESULTS_GUID(@IDSETREGISTERIDPARAMETER)';
      exec sp_executesql @IDSETREGISTERSQL, @IDSETPARAMETERDEFINITION, @IDSETREGISTERIDPARAMETER = @IDSETREGISTERID;
      end

      --AdamBu - Bug 40526 - If the selection used is static, make sure none of the records it contains have been deleted.
      if exists(
      select 1
      from dbo.IDSETREGISTER
      where ID = @IDSETREGISTERID and STATIC = 1
      )
      begin
      declare @STATICSQL nvarchar(max) = 'delete ' + @SELECTION + ' where ID not in(select ID from CONSTITUENT);'
      exec sp_executesql @STATICSQL
      end
      end

      /* If @REMOVEUNQUALIFIED is true and and id set is selected then delete all records from the attribute table that are not in the id set.*/
      if @IDSETREGISTERID is not null and @REMOVEUNQUALIFIED = 1 begin
      declare @DELETESQL nvarchar(max);
      declare @DELETEPARAMETERDEFINITION nvarchar(500);

      set @DELETEPARAMETERDEFINITION = '@CURRENTAPPUSERIDPARAMETER uniqueidentifier, @BPIDPARAMETER uniqueidentifier, @BYPASSSECURITYPARAMETER bit, @BYPASSSITESECURITYPARAMETER bit'

      if @ONEPERRECORD = 1
      if @BYPASSSECURITY = 0 or @BYPASSSITESECURITY = 0
      begin
      set @DELETESQL = 'delete from dbo.[' + @ATTRIBUTETABLENAME + '] where ID in
      (
      select SELECTEDCONSTITUENT.ID
      from dbo.[' + @ATTRIBUTETABLENAME + '] SELECTEDCONSTITUENT ' + @SECURITYCLAUSE +
      ' and SELECTEDCONSTITUENT.ID not in(select ID from ' + @SELECTION + ')
      )';
      end
      else
      begin
      set @DELETESQL = 'delete from dbo.[' + @ATTRIBUTETABLENAME + '] where ID in
      (
      select SELECTEDCONSTITUENT.ID
      from dbo.[' + @ATTRIBUTETABLENAME + '] SELECTEDCONSTITUENT ' +
      ' where SELECTEDCONSTITUENT.ID not in(select ID from ' + @SELECTION + ')
      )';
      end
      else
      if @BYPASSSECURITY = 0 or @BYPASSSITESECURITY = 0
      begin
      set @DELETESQL = 'delete from dbo.[' + @ATTRIBUTETABLENAME + '] where CONSTITUENTID in
      (
      select SELECTEDCONSTITUENT.CONSTITUENTID
      from dbo.[' + @ATTRIBUTETABLENAME + '] SELECTEDCONSTITUENT ' + @MULTIPLEATTRIBUTESECURITYCLAUSE +
      ' and SELECTEDCONSTITUENT.CONSTITUENTID not in(select ID from ' + @SELECTION + ')
      )';
      end
      else
      begin
      set @DELETESQL = 'delete from dbo.[' + @ATTRIBUTETABLENAME + '] where CONSTITUENTID in
      (
      select SELECTEDCONSTITUENT.CONSTITUENTID
      from dbo.[' + @ATTRIBUTETABLENAME + '] SELECTEDCONSTITUENT ' +
      ' where SELECTEDCONSTITUENT.CONSTITUENTID not in(select ID from ' + @SELECTION + ')
      )';
      end

      declare @CONTEXTCACHE varbinary(128);

      /* Cache current context information@ */
      set @CONTEXTCACHE = CONTEXT_INFO();

      /* Set CONTEXT_INFO to @CHANGEAGENTID */
      set CONTEXT_INFO @CHANGEAGENTID;

      /* delete records */
      exec sp_executesql @DELETESQL, @DELETEPARAMETERDEFINITION, @CURRENTAPPUSERIDPARAMETER = @CURRENTAPPUSERID, @BPIDPARAMETER = @BPID, @BYPASSSECURITYPARAMETER = @BYPASSSECURITY, @BYPASSSITESECURITYPARAMETER = @BYPASSSITESECURITY;
      set @NUMBERDELETED = @@ROWCOUNT;

      /* Reset CONTEXT_INFO to previous value */
      if not @contextCache is null
      set CONTEXT_INFO @CONTEXTCACHE;
      end

      if @IDSETREGISTERID is not null
      begin
      if @ONEPERRECORD = 1
      begin
      set @INSERTSQL = 'insert into dbo.[' + @ATTRIBUTETABLENAME + '] (ID, ' + @VALUECOLUMNNAME + ', ';
      if @DATATYPE = 3
      set @INSERTSQL = @INSERTSQL + 'CURRENCYID, ';
      set @INSERTSQL = @INSERTSQL + 'STARTDATE, COMMENT, ADDEDBYID, CHANGEDBYID, DATEADDED, DATECHANGED) select SELECTION.ID, @VALUEPARAMETER, ';
      if @DATATYPE = 3
      set @INSERTSQL = @INSERTSQL + '@CURRENCYIDPARAMETER, ';
      set @INSERTSQL = @INSERTSQL + '@STARTDATEPARAMETER, @COMMENTPARAMETER, @CHANGEAGENTIDPARAMETER, @CHANGEAGENTIDPARAMETER, @CURRENTDATEPARAMETER, @CURRENTDATEPARAMETER from ' + @SELECTION + ' as SELECTION';

      /* We don't want to add a duplicate attribute value so we need to check if the value already exists before inserting the record. */
      set @INSERTSQL = @INSERTSQL + ' where SELECTION.ID not in(select ID from dbo.[' + @ATTRIBUTETABLENAME + '])'

      /* If overwriting the exiting value we must only insert records that don't already exist in the attribute table */
      if @OVERWRITEEXISTINGVALUE = 1 begin
      set @UPDATESQL = 'update dbo.[' + @ATTRIBUTETABLENAME + '] set ' + @VALUECOLUMNNAME + ' = @VALUEPARAMETER, ';
      if @DATATYPE = 3
      set @UPDATESQL = @UPDATESQL + 'CURRENCYID = @CURRENCYIDPARAMETER, ';
      set @UPDATESQL = @UPDATESQL + 'STARTDATE = @STARTDATEPARAMETER, COMMENT = @COMMENTPARAMETER, CHANGEDBYID = @CHANGEAGENTIDPARAMETER, DATECHANGED = @CURRENTDATEPARAMETER where [' + @ATTRIBUTETABLENAME + '].ID in (select ID from ' + @SELECTION + ')'
      end
      end
      else
      begin
      set @INSERTSQL = 'insert into dbo.[' + @ATTRIBUTETABLENAME + '] (ID, CONSTITUENTID, ' + @VALUECOLUMNNAME + ', ';
      if @DATATYPE = 3
      set @INSERTSQL = @INSERTSQL + 'CURRENCYID, ';
      set @INSERTSQL = @INSERTSQL + 'STARTDATE, COMMENT, ADDEDBYID, CHANGEDBYID, DATEADDED, DATECHANGED) select newid(), SELECTION.ID, @VALUEPARAMETER, ';
      if @DATATYPE = 3
      set @INSERTSQL = @INSERTSQL + '@CURRENCYIDPARAMETER, ';
      set @INSERTSQL = @INSERTSQL + '@STARTDATEPARAMETER, @COMMENTPARAMETER, @CHANGEAGENTIDPARAMETER, @CHANGEAGENTIDPARAMETER, @CURRENTDATEPARAMETER, @CURRENTDATEPARAMETER from ' + @SELECTION + ' as SELECTION';

      /* We don't want to add a duplicate attribute value so we need to check if the value already exists before inserting the record. */
      set @INSERTSQL = @INSERTSQL + ' where SELECTION.ID not in(select CONSTITUENTID from dbo.[' + @ATTRIBUTETABLENAME + '])'

      /* If overwriting the exiting value we must only insert records that don't already exist in the attribute table */
      if @OVERWRITEEXISTINGVALUE = 1 begin
      set @UPDATESQL = 'update dbo.[' + @ATTRIBUTETABLENAME + '] set ' + @VALUECOLUMNNAME + ' = @VALUEPARAMETER, ';
      if @DATATYPE = 3
      set @UPDATESQL = @UPDATESQL + 'CURRENCYID = @CURRENCYIDPARAMETER, ';
      set @UPDATESQL = @UPDATESQL + 'STARTDATE = @STARTDATEPARAMETER, COMMENT = @COMMENTPARAMETER, CHANGEDBYID = @CHANGEAGENTIDPARAMETER, DATECHANGED = @CURRENTDATEPARAMETER where [' + @ATTRIBUTETABLENAME + '].CONSTITUENTID in (select ID from ' + @SELECTION + ')'
      end
      end
      end
      else
      begin
      if @ONEPERRECORD = 1
      begin
      if @BYPASSSECURITY = 0 or @BYPASSSITESECURITY = 0
      begin
      set @INSERTSQL = 'insert into dbo.[' + @ATTRIBUTETABLENAME + '] (ID, ' + @VALUECOLUMNNAME + ', ';
      if @DATATYPE = 3
      set @INSERTSQL = @INSERTSQL + 'CURRENCYID, ';
      set @INSERTSQL = @INSERTSQL + 'STARTDATE, COMMENT, ADDEDBYID, CHANGEDBYID, DATEADDED, DATECHANGED) select SELECTEDCONSTITUENT.ID, @VALUEPARAMETER, ';
      if @DATATYPE = 3
      set @INSERTSQL = @INSERTSQL + '@CURRENCYIDPARAMETER, ';
      set @INSERTSQL = @INSERTSQL + '@STARTDATEPARAMETER, @COMMENTPARAMETER, @CHANGEAGENTIDPARAMETER, @CHANGEAGENTIDPARAMETER, @CURRENTDATEPARAMETER, @CURRENTDATEPARAMETER from dbo.CONSTITUENT SELECTEDCONSTITUENT ' + @SECURITYCLAUSE;

      /* We don't want to add a duplicate attribute value so we need to check if the value already exists before inserting the record. */
      set @INSERTSQL = @INSERTSQL + ' and SELECTEDCONSTITUENT.ID not in(select ID from dbo.[' + @ATTRIBUTETABLENAME + '])';
      end
      else
      begin
      set @INSERTSQL = 'insert into dbo.[' + @ATTRIBUTETABLENAME + '] (ID, ' + @VALUECOLUMNNAME + ', ';
      if @DATATYPE = 3
      set @INSERTSQL = @INSERTSQL + 'CURRENCYID, ';
      set @INSERTSQL = @INSERTSQL + 'STARTDATE, COMMENT, ADDEDBYID, CHANGEDBYID, DATEADDED, DATECHANGED) select SELECTEDCONSTITUENT.ID, @VALUEPARAMETER, ';
      if @DATATYPE = 3
      set @INSERTSQL = @INSERTSQL + '@CURRENCYIDPARAMETER, ';
      set @INSERTSQL = @INSERTSQL + '@STARTDATEPARAMETER, @COMMENTPARAMETER, @CHANGEAGENTIDPARAMETER, @CHANGEAGENTIDPARAMETER, @CURRENTDATEPARAMETER, @CURRENTDATEPARAMETER from dbo.CONSTITUENT SELECTEDCONSTITUENT ';

      /* We don't want to add a duplicate attribute value so we need to check if the value already exists before inserting the record. */
      set @INSERTSQL = @INSERTSQL + ' where SELECTEDCONSTITUENT.ID not in(select ID from dbo.[' + @ATTRIBUTETABLENAME + '])';
      end

      /* If overwriting the exiting value we must only insert records that don't already exist in the attribute table */
      if @OVERWRITEEXISTINGVALUE = 1 begin
      set @UPDATESQL = 'update dbo.[' + @ATTRIBUTETABLENAME + '] set ' + @VALUECOLUMNNAME + ' = @VALUEPARAMETER, ';
      if @DATATYPE = 3
      set @UPDATESQL = @UPDATESQL + 'CURRENCYID = @CURRENCYIDPARAMETER, ';
      set @UPDATESQL = @UPDATESQL + 'STARTDATE = @STARTDATEPARAMETER, COMMENT = @COMMENTPARAMETER, CHANGEDBYID = @CHANGEAGENTIDPARAMETER, DATECHANGED = @CURRENTDATEPARAMETER from dbo.[' + @ATTRIBUTETABLENAME + '] SELECTEDCONSTITUENT ';

      if @BYPASSSECURITY = 0 or @BYPASSSITESECURITY = 0 begin
      set @UPDATESQL = @UPDATESQL + @SECURITYCLAUSE;
      end
      end
      end
      else
      begin
      if @BYPASSSECURITY = 0 or @BYPASSSITESECURITY = 0
      begin
      set @INSERTSQL = 'insert into dbo.[' + @ATTRIBUTETABLENAME + '] (ID, CONSTITUENTID, ' + @VALUECOLUMNNAME + ', ';
      if @DATATYPE = 3
      set @INSERTSQL = @INSERTSQL + 'CURRENCYID, ';
      set @INSERTSQL = @INSERTSQL + 'STARTDATE, COMMENT, ADDEDBYID, CHANGEDBYID, DATEADDED, DATECHANGED) select newid(), SELECTEDCONSTITUENT.ID, @VALUEPARAMETER, ';
      if @DATATYPE = 3
      set @INSERTSQL = @INSERTSQL + '@CURRENCYIDPARAMETER, ';
      set @INSERTSQL = @INSERTSQL + '@STARTDATEPARAMETER, @COMMENTPARAMETER, @CHANGEAGENTIDPARAMETER, @CHANGEAGENTIDPARAMETER, @CURRENTDATEPARAMETER, @CURRENTDATEPARAMETER from dbo.CONSTITUENT SELECTEDCONSTITUENT ' + @SECURITYCLAUSE;

      /* We don't want to add a duplicate attribute value so we need to check if the value already exists before inserting the record. */
      set @INSERTSQL = @INSERTSQL + ' and SELECTEDCONSTITUENT.ID not in(select CONSTITUENTID from dbo.[' + @ATTRIBUTETABLENAME + '])';
      end
      else
      begin
      set @INSERTSQL = 'insert into dbo.[' + @ATTRIBUTETABLENAME + '] (ID, CONSTITUENTID, ' + @VALUECOLUMNNAME + ', ';
      if @DATATYPE = 3
      set @INSERTSQL = @INSERTSQL + 'CURRENCYID, ';
      set @INSERTSQL = @INSERTSQL + 'STARTDATE, COMMENT, ADDEDBYID, CHANGEDBYID, DATEADDED, DATECHANGED) select newid(), SELECTEDCONSTITUENT.ID, @VALUEPARAMETER, ';
      if @DATATYPE = 3
      set @INSERTSQL = @INSERTSQL + '@CURRENCYIDPARAMETER, ';
      set @INSERTSQL = @INSERTSQL + '@STARTDATEPARAMETER, @COMMENTPARAMETER, @CHANGEAGENTIDPARAMETER, @CHANGEAGENTIDPARAMETER, @CURRENTDATEPARAMETER, @CURRENTDATEPARAMETER from dbo.CONSTITUENT SELECTEDCONSTITUENT ';

      /* We don't want to add a duplicate attribute value so we need to check if the value already exists before inserting the record. */
      set @INSERTSQL = @INSERTSQL + ' where SELECTEDCONSTITUENT.ID not in(select CONSTITUENTID from dbo.[' + @ATTRIBUTETABLENAME + '])';
      end

      /* If overwriting the existing value we must only insert records that don't already exist in the attribute table */
      if @OVERWRITEEXISTINGVALUE = 1 begin
      set @UPDATESQL = 'update dbo.[' + @ATTRIBUTETABLENAME + '] set ' + @VALUECOLUMNNAME + ' = @VALUEPARAMETER, ';
      if @DATATYPE = 3
      set @UPDATESQL = @UPDATESQL + 'CURRENCYID = @CURRENCYIDPARAMETER, ';
      set @UPDATESQL = @UPDATESQL + 'STARTDATE = @STARTDATEPARAMETER, COMMENT = @COMMENTPARAMETER, CHANGEDBYID = @CHANGEAGENTIDPARAMETER, DATECHANGED = @CURRENTDATEPARAMETER from dbo.[' + @ATTRIBUTETABLENAME + '] SELECTEDCONSTITUENT ';

      if @BYPASSSECURITY = 0 or @BYPASSSITESECURITY = 0 begin
      set @UPDATESQL = @UPDATESQL + @MULTIPLEATTRIBUTESECURITYCLAUSE
      end
      end
      end
      end

      begin try
      /* @VALUEPARAMETER definition must change based on attribute data type */
      if @DATATYPE = 0
      begin
      set @PARAMETERDEFINITION = @PARAMETERDEFINITION + ', @VALUEPARAMETER nvarchar(250)';

      if @BYPASSSECURITY = 0 or @BYPASSSITESECURITY = 0
      begin
      set @PARAMETERDEFINITION = @PARAMETERDEFINITION + @SECURITYPARAMETERS;

      if @UPDATESQL &lt;&gt; '' begin
      exec sp_executesql @UPDATESQL, @PARAMETERDEFINITION, @STARTDATEPARAMETER = @STARTDATE, @COMMENTPARAMETER = @COMMENT, @CHANGEAGENTIDPARAMETER = @CHANGEAGENTID, @CURRENTDATEPARAMETER = @CURRENTDATE, @VALUEPARAMETER = @STRINGVALUE, @CURRENTAPPUSERIDPARAMETER = @CURRENTAPPUSERID, @BPIDPARAMETER = @BPID, @BYPASSSECURITYPARAMETER = @BYPASSSECURITY, @BYPASSSITESECURITYPARAMETER = @BYPASSSITESECURITY;
      set @NUMBEREDITED = @@ROWCOUNT;
      end

      exec sp_executesql @INSERTSQL, @PARAMETERDEFINITION, @STARTDATEPARAMETER = @STARTDATE, @COMMENTPARAMETER = @COMMENT, @CHANGEAGENTIDPARAMETER = @CHANGEAGENTID, @CURRENTDATEPARAMETER = @CURRENTDATE, @VALUEPARAMETER = @STRINGVALUE, @CURRENTAPPUSERIDPARAMETER = @CURRENTAPPUSERID, @BPIDPARAMETER = @BPID, @BYPASSSECURITYPARAMETER = @BYPASSSECURITY, @BYPASSSITESECURITYPARAMETER = @BYPASSSITESECURITY;
      set @NUMBERADDED = @@ROWCOUNT;

      end

      else
      begin
      if @UPDATESQL &lt;&gt; '' begin
      exec sp_executesql @UPDATESQL, @PARAMETERDEFINITION,  @STARTDATEPARAMETER = @STARTDATE, @COMMENTPARAMETER = @COMMENT, @CHANGEAGENTIDPARAMETER = @CHANGEAGENTID, @CURRENTDATEPARAMETER = @CURRENTDATE, @VALUEPARAMETER = @STRINGVALUE;
      set @NUMBEREDITED = @@ROWCOUNT;
      end

      exec sp_executesql @INSERTSQL, @PARAMETERDEFINITION,  @STARTDATEPARAMETER = @STARTDATE, @COMMENTPARAMETER = @COMMENT, @CHANGEAGENTIDPARAMETER = @CHANGEAGENTID, @CURRENTDATEPARAMETER = @CURRENTDATE, @VALUEPARAMETER = @STRINGVALUE;
      set @NUMBERADDED = @@ROWCOUNT;
      end

      end

      else if @DATATYPE = 1
      begin
      set @PARAMETERDEFINITION = @PARAMETERDEFINITION + ', @VALUEPARAMETER int';

      if @BYPASSSECURITY = 0 or @BYPASSSITESECURITY = 0
      begin
      set @PARAMETERDEFINITION = @PARAMETERDEFINITION + @SECURITYPARAMETERS;

      if @UPDATESQL &lt;&gt; '' begin
      exec sp_executesql @UPDATESQL, @PARAMETERDEFINITION,  @STARTDATEPARAMETER = @STARTDATE, @COMMENTPARAMETER = @COMMENT, @CHANGEAGENTIDPARAMETER = @CHANGEAGENTID, @CURRENTDATEPARAMETER = @CURRENTDATE, @VALUEPARAMETER = @NUMBERVALUE, @CURRENTAPPUSERIDPARAMETER = @CURRENTAPPUSERID, @BPIDPARAMETER = @BPID, @BYPASSSECURITYPARAMETER = @BYPASSSECURITY, @BYPASSSITESECURITYPARAMETER = @BYPASSSITESECURITY;
      set @NUMBEREDITED = @@ROWCOUNT;
      end

      exec sp_executesql @INSERTSQL, @PARAMETERDEFINITION,  @STARTDATEPARAMETER = @STARTDATE, @COMMENTPARAMETER = @COMMENT, @CHANGEAGENTIDPARAMETER = @CHANGEAGENTID, @CURRENTDATEPARAMETER = @CURRENTDATE, @VALUEPARAMETER = @NUMBERVALUE, @CURRENTAPPUSERIDPARAMETER = @CURRENTAPPUSERID, @BPIDPARAMETER = @BPID, @BYPASSSECURITYPARAMETER = @BYPASSSECURITY, @BYPASSSITESECURITYPARAMETER = @BYPASSSITESECURITY;
      set @NUMBERADDED = @@ROWCOUNT;

      end

      else
      begin
      if @UPDATESQL &lt;&gt; '' begin
      exec sp_executesql @UPDATESQL, @PARAMETERDEFINITION,  @STARTDATEPARAMETER = @STARTDATE, @COMMENTPARAMETER = @COMMENT, @CHANGEAGENTIDPARAMETER = @CHANGEAGENTID, @CURRENTDATEPARAMETER = @CURRENTDATE, @VALUEPARAMETER = @NUMBERVALUE;
      set @NUMBEREDITED = @@ROWCOUNT;
      end

      exec sp_executesql @INSERTSQL, @PARAMETERDEFINITION,  @STARTDATEPARAMETER = @STARTDATE, @COMMENTPARAMETER = @COMMENT, @CHANGEAGENTIDPARAMETER = @CHANGEAGENTID, @CURRENTDATEPARAMETER = @CURRENTDATE, @VALUEPARAMETER = @NUMBERVALUE;
      set @NUMBERADDED = @@ROWCOUNT;
      end
      end

      else if @DATATYPE = 2
      begin
      set @PARAMETERDEFINITION = @PARAMETERDEFINITION + ', @VALUEPARAMETER datetime';

      if @BYPASSSECURITY = 0 or @BYPASSSITESECURITY = 0
      begin
      set @PARAMETERDEFINITION = @PARAMETERDEFINITION + @SECURITYPARAMETERS;

      if @UPDATESQL &lt;&gt; '' begin
      exec sp_executesql @UPDATESQL, @PARAMETERDEFINITION,  @STARTDATEPARAMETER = @STARTDATE, @COMMENTPARAMETER = @COMMENT, @CHANGEAGENTIDPARAMETER = @CHANGEAGENTID, @CURRENTDATEPARAMETER = @CURRENTDATE, @VALUEPARAMETER = @DATEVALUE, @CURRENTAPPUSERIDPARAMETER = @CURRENTAPPUSERID, @BPIDPARAMETER = @BPID, @BYPASSSECURITYPARAMETER = @BYPASSSECURITY, @BYPASSSITESECURITYPARAMETER = @BYPASSSITESECURITY;
      set @NUMBEREDITED = @@ROWCOUNT;
      end

      exec sp_executesql @INSERTSQL, @PARAMETERDEFINITION,  @STARTDATEPARAMETER = @STARTDATE, @COMMENTPARAMETER = @COMMENT, @CHANGEAGENTIDPARAMETER = @CHANGEAGENTID, @CURRENTDATEPARAMETER = @CURRENTDATE, @VALUEPARAMETER = @DATEVALUE, @CURRENTAPPUSERIDPARAMETER = @CURRENTAPPUSERID, @BPIDPARAMETER = @BPID, @BYPASSSECURITYPARAMETER = @BYPASSSECURITY, @BYPASSSITESECURITYPARAMETER = @BYPASSSITESECURITY;
      set @NUMBERADDED = @@ROWCOUNT;

      end

      else
      begin
      if @UPDATESQL &lt;&gt; '' begin
      exec sp_executesql @UPDATESQL, @PARAMETERDEFINITION,  @STARTDATEPARAMETER = @STARTDATE, @COMMENTPARAMETER = @COMMENT, @CHANGEAGENTIDPARAMETER = @CHANGEAGENTID, @CURRENTDATEPARAMETER = @CURRENTDATE, @VALUEPARAMETER = @DATEVALUE;
      set @NUMBEREDITED = @@ROWCOUNT;
      end

      exec sp_executesql @INSERTSQL, @PARAMETERDEFINITION,  @STARTDATEPARAMETER = @STARTDATE, @COMMENTPARAMETER = @COMMENT, @CHANGEAGENTIDPARAMETER = @CHANGEAGENTID, @CURRENTDATEPARAMETER = @CURRENTDATE, @VALUEPARAMETER = @DATEVALUE;
      set @NUMBERADDED = @@ROWCOUNT;
      end
      end

      else if @DATATYPE = 3
      begin
      set @PARAMETERDEFINITION = @PARAMETERDEFINITION + ', @VALUEPARAMETER money';

      if @BYPASSSECURITY = 0 or @BYPASSSITESECURITY = 0
      begin
      set @PARAMETERDEFINITION = @PARAMETERDEFINITION + @SECURITYPARAMETERS;

      if @UPDATESQL &lt;&gt; '' begin
      exec sp_executesql @UPDATESQL, @PARAMETERDEFINITION, @STARTDATEPARAMETER = @STARTDATE, @CURRENCYIDPARAMETER = @CURRENCYID, @COMMENTPARAMETER = @COMMENT, @CHANGEAGENTIDPARAMETER = @CHANGEAGENTID, @CURRENTDATEPARAMETER = @CURRENTDATE, @VALUEPARAMETER = @MONEYVALUE, @CURRENTAPPUSERIDPARAMETER = @CURRENTAPPUSERID, @BPIDPARAMETER = @BPID, @BYPASSSECURITYPARAMETER = @BYPASSSECURITY, @BYPASSSITESECURITYPARAMETER = @BYPASSSITESECURITY;
      set @NUMBEREDITED = @@ROWCOUNT;
      end

      exec sp_executesql @INSERTSQL, @PARAMETERDEFINITION, @STARTDATEPARAMETER = @STARTDATE, @CURRENCYIDPARAMETER = @CURRENCYID, @COMMENTPARAMETER = @COMMENT, @CHANGEAGENTIDPARAMETER = @CHANGEAGENTID, @CURRENTDATEPARAMETER = @CURRENTDATE, @VALUEPARAMETER = @MONEYVALUE, @CURRENTAPPUSERIDPARAMETER = @CURRENTAPPUSERID, @BPIDPARAMETER = @BPID, @BYPASSSECURITYPARAMETER = @BYPASSSECURITY, @BYPASSSITESECURITYPARAMETER = @BYPASSSITESECURITY;
      set @NUMBERADDED = @@ROWCOUNT;

      end

      else
      begin
      if @UPDATESQL &lt;&gt; '' begin
      exec sp_executesql @UPDATESQL, @PARAMETERDEFINITION, @STARTDATEPARAMETER = @STARTDATE, @CURRENCYIDPARAMETER = @CURRENCYID, @COMMENTPARAMETER = @COMMENT, @CHANGEAGENTIDPARAMETER = @CHANGEAGENTID, @CURRENTDATEPARAMETER = @CURRENTDATE, @VALUEPARAMETER = @MONEYVALUE;
      set @NUMBEREDITED = @@ROWCOUNT;
      end

      exec sp_executesql @INSERTSQL, @PARAMETERDEFINITION, @STARTDATEPARAMETER = @STARTDATE, @CURRENCYIDPARAMETER = @CURRENCYID, @COMMENTPARAMETER = @COMMENT, @CHANGEAGENTIDPARAMETER = @CHANGEAGENTID, @CURRENTDATEPARAMETER = @CURRENTDATE, @VALUEPARAMETER = @MONEYVALUE;
      set @NUMBERADDED = @@ROWCOUNT;
      end

      end

      else if @DATATYPE = 4
      begin
      set @PARAMETERDEFINITION = @PARAMETERDEFINITION + ', @VALUEPARAMETER bit';

      if @BYPASSSECURITY = 0 or @BYPASSSITESECURITY = 0
      begin
      set @PARAMETERDEFINITION = @PARAMETERDEFINITION + @SECURITYPARAMETERS;

      if @UPDATESQL &lt;&gt; '' begin
      exec sp_executesql @UPDATESQL, @PARAMETERDEFINITION,  @STARTDATEPARAMETER = @STARTDATE, @COMMENTPARAMETER = @COMMENT, @CHANGEAGENTIDPARAMETER = @CHANGEAGENTID, @CURRENTDATEPARAMETER = @CURRENTDATE, @VALUEPARAMETER = @BOOLEANVALUE, @CURRENTAPPUSERIDPARAMETER = @CURRENTAPPUSERID, @BPIDPARAMETER = @BPID, @BYPASSSECURITYPARAMETER = @BYPASSSECURITY, @BYPASSSITESECURITYPARAMETER = @BYPASSSITESECURITY;
      set @NUMBEREDITED = @@ROWCOUNT;
      end

      exec sp_executesql @INSERTSQL, @PARAMETERDEFINITION,  @STARTDATEPARAMETER = @STARTDATE, @COMMENTPARAMETER = @COMMENT, @CHANGEAGENTIDPARAMETER = @CHANGEAGENTID, @CURRENTDATEPARAMETER = @CURRENTDATE, @VALUEPARAMETER = @BOOLEANVALUE, @CURRENTAPPUSERIDPARAMETER = @CURRENTAPPUSERID, @BPIDPARAMETER = @BPID, @BYPASSSECURITYPARAMETER = @BYPASSSECURITY, @BYPASSSITESECURITYPARAMETER = @BYPASSSITESECURITY;
      set @NUMBERADDED = @@ROWCOUNT;

      end

      else
      begin
      if @UPDATESQL &lt;&gt; '' begin
      exec sp_executesql @UPDATESQL, @PARAMETERDEFINITION,  @STARTDATEPARAMETER = @STARTDATE, @COMMENTPARAMETER = @COMMENT, @CHANGEAGENTIDPARAMETER = @CHANGEAGENTID, @CURRENTDATEPARAMETER = @CURRENTDATE, @VALUEPARAMETER = @BOOLEANVALUE;
      set @NUMBEREDITED = @@ROWCOUNT;
      end

      exec sp_executesql @INSERTSQL, @PARAMETERDEFINITION,  @STARTDATEPARAMETER = @STARTDATE, @COMMENTPARAMETER = @COMMENT, @CHANGEAGENTIDPARAMETER = @CHANGEAGENTID, @CURRENTDATEPARAMETER = @CURRENTDATE, @VALUEPARAMETER = @BOOLEANVALUE;
      set @NUMBERADDED = @@ROWCOUNT;
      end
      end

      else if @DATATYPE = 5
      begin
      set @PARAMETERDEFINITION = @PARAMETERDEFINITION + ', @VALUEPARAMETER uniqueidentifier';

      if @BYPASSSECURITY = 0 or @BYPASSSITESECURITY = 0
      begin
      set @PARAMETERDEFINITION = @PARAMETERDEFINITION + @SECURITYPARAMETERS;

      if @UPDATESQL &lt;&gt; '' begin
      exec sp_executesql @UPDATESQL, @PARAMETERDEFINITION,  @STARTDATEPARAMETER = @STARTDATE, @COMMENTPARAMETER = @COMMENT, @CHANGEAGENTIDPARAMETER = @CHANGEAGENTID, @CURRENTDATEPARAMETER = @CURRENTDATE, @VALUEPARAMETER = @CODETABLEVALUE, @CURRENTAPPUSERIDPARAMETER = @CURRENTAPPUSERID, @BPIDPARAMETER = @BPID, @BYPASSSECURITYPARAMETER = @BYPASSSECURITY, @BYPASSSITESECURITYPARAMETER = @BYPASSSITESECURITY;
      set @NUMBEREDITED = @@ROWCOUNT;
      end

      exec sp_executesql @INSERTSQL, @PARAMETERDEFINITION,  @STARTDATEPARAMETER = @STARTDATE, @COMMENTPARAMETER = @COMMENT, @CHANGEAGENTIDPARAMETER = @CHANGEAGENTID, @CURRENTDATEPARAMETER = @CURRENTDATE, @VALUEPARAMETER = @CODETABLEVALUE, @CURRENTAPPUSERIDPARAMETER = @CURRENTAPPUSERID, @BPIDPARAMETER = @BPID, @BYPASSSECURITYPARAMETER = @BYPASSSECURITY, @BYPASSSITESECURITYPARAMETER = @BYPASSSITESECURITY;
      set @NUMBERADDED = @@ROWCOUNT;

      end

      else
      begin
      if @UPDATESQL &lt;&gt; '' begin
      exec sp_executesql @UPDATESQL, @PARAMETERDEFINITION,  @STARTDATEPARAMETER = @STARTDATE, @COMMENTPARAMETER = @COMMENT, @CHANGEAGENTIDPARAMETER = @CHANGEAGENTID, @CURRENTDATEPARAMETER = @CURRENTDATE, @VALUEPARAMETER = @CODETABLEVALUE;
      set @NUMBEREDITED = @@ROWCOUNT;
      end

      exec sp_executesql @INSERTSQL, @PARAMETERDEFINITION,  @STARTDATEPARAMETER = @STARTDATE, @COMMENTPARAMETER = @COMMENT, @CHANGEAGENTIDPARAMETER = @CHANGEAGENTID, @CURRENTDATEPARAMETER = @CURRENTDATE, @VALUEPARAMETER = @CODETABLEVALUE;
      set @NUMBERADDED = @@ROWCOUNT;
      end
      end

      else if @DATATYPE = 6
      begin
      set @PARAMETERDEFINITION = @PARAMETERDEFINITION + ', @VALUEPARAMETER uniqueidentifier';

      if @BYPASSSECURITY = 0 or @BYPASSSITESECURITY = 0
      begin
      set @PARAMETERDEFINITION = @PARAMETERDEFINITION + @SECURITYPARAMETERS;

      if @UPDATESQL &lt;&gt; '' begin
      exec sp_executesql @UPDATESQL, @PARAMETERDEFINITION,  @STARTDATEPARAMETER = @STARTDATE, @COMMENTPARAMETER = @COMMENT, @CHANGEAGENTIDPARAMETER = @CHANGEAGENTID, @CURRENTDATEPARAMETER = @CURRENTDATE, @VALUEPARAMETER = @CONSTITUENTIDVALUE, @CURRENTAPPUSERIDPARAMETER = @CURRENTAPPUSERID, @BPIDPARAMETER = @BPID, @BYPASSSECURITYPARAMETER = @BYPASSSECURITY, @BYPASSSITESECURITYPARAMETER = @BYPASSSITESECURITY;
      set @NUMBEREDITED = @@ROWCOUNT;
      end

      exec sp_executesql @INSERTSQL, @PARAMETERDEFINITION,  @STARTDATEPARAMETER = @STARTDATE, @COMMENTPARAMETER = @COMMENT, @CHANGEAGENTIDPARAMETER = @CHANGEAGENTID, @CURRENTDATEPARAMETER = @CURRENTDATE, @VALUEPARAMETER = @CONSTITUENTIDVALUE, @CURRENTAPPUSERIDPARAMETER = @CURRENTAPPUSERID, @BPIDPARAMETER = @BPID, @BYPASSSECURITYPARAMETER = @BYPASSSECURITY, @BYPASSSITESECURITYPARAMETER = @BYPASSSITESECURITY;
      set @NUMBERADDED = @@ROWCOUNT;

      end

      else
      begin
      if @UPDATESQL &lt;&gt; '' begin
      exec sp_executesql @UPDATESQL, @PARAMETERDEFINITION,  @STARTDATEPARAMETER = @STARTDATE, @COMMENTPARAMETER = @COMMENT, @CHANGEAGENTIDPARAMETER = @CHANGEAGENTID, @CURRENTDATEPARAMETER = @CURRENTDATE, @VALUEPARAMETER = @CONSTITUENTIDVALUE;
      set @NUMBEREDITED = @@ROWCOUNT;
      end

      exec sp_executesql @INSERTSQL, @PARAMETERDEFINITION,  @STARTDATEPARAMETER = @STARTDATE, @COMMENTPARAMETER = @COMMENT, @CHANGEAGENTIDPARAMETER = @CHANGEAGENTID, @CURRENTDATEPARAMETER = @CURRENTDATE, @VALUEPARAMETER = @CONSTITUENTIDVALUE;
      set @NUMBERADDED = @@ROWCOUNT;
      end
      end

      else if @DATATYPE = 7
      begin
      set @PARAMETERDEFINITION = @PARAMETERDEFINITION + ', @VALUEPARAMETER udt_fuzzydate';

      if @BYPASSSECURITY = 0 or @BYPASSSITESECURITY = 0
      begin
      set @PARAMETERDEFINITION = @PARAMETERDEFINITION + @SECURITYPARAMETERS;

      if @UPDATESQL &lt;&gt; '' begin
      exec sp_executesql @UPDATESQL, @PARAMETERDEFINITION,  @STARTDATEPARAMETER = @STARTDATE, @COMMENTPARAMETER = @COMMENT, @CHANGEAGENTIDPARAMETER = @CHANGEAGENTID, @CURRENTDATEPARAMETER = @CURRENTDATE, @VALUEPARAMETER = @FUZZYDATEVALUE, @CURRENTAPPUSERIDPARAMETER = @CURRENTAPPUSERID, @BPIDPARAMETER = @BPID, @BYPASSSECURITYPARAMETER = @BYPASSSECURITY, @BYPASSSITESECURITYPARAMETER = @BYPASSSITESECURITY;
      set @NUMBEREDITED = @@ROWCOUNT;
      end

      exec sp_executesql @INSERTSQL, @PARAMETERDEFINITION,  @STARTDATEPARAMETER = @STARTDATE, @COMMENTPARAMETER = @COMMENT, @CHANGEAGENTIDPARAMETER = @CHANGEAGENTID, @CURRENTDATEPARAMETER = @CURRENTDATE, @VALUEPARAMETER = @FUZZYDATEVALUE, @CURRENTAPPUSERIDPARAMETER = @CURRENTAPPUSERID, @BPIDPARAMETER = @BPID, @BYPASSSECURITYPARAMETER = @BYPASSSECURITY, @BYPASSSITESECURITYPARAMETER = @BYPASSSITESECURITY;
      set @NUMBERADDED = @@ROWCOUNT;

      end

      else
      begin
      if @UPDATESQL &lt;&gt; '' begin
      exec sp_executesql @UPDATESQL, @PARAMETERDEFINITION,  @STARTDATEPARAMETER = @STARTDATE, @COMMENTPARAMETER = @COMMENT, @CHANGEAGENTIDPARAMETER = @CHANGEAGENTID, @CURRENTDATEPARAMETER = @CURRENTDATE, @VALUEPARAMETER = @FUZZYDATEVALUE;
      set @NUMBEREDITED = @@ROWCOUNT;
      end

      exec sp_executesql @INSERTSQL, @PARAMETERDEFINITION,  @STARTDATEPARAMETER = @STARTDATE, @COMMENTPARAMETER = @COMMENT, @CHANGEAGENTIDPARAMETER = @CHANGEAGENTID, @CURRENTDATEPARAMETER = @CURRENTDATE, @VALUEPARAMETER = @FUZZYDATEVALUE;
      set @NUMBERADDED = @@ROWCOUNT;
      end
      end

      else if @DATATYPE = 8
      begin
      set @PARAMETERDEFINITION = @PARAMETERDEFINITION + ', @VALUEPARAMETER udt_hourminute';

      if @BYPASSSECURITY = 0 or @BYPASSSITESECURITY = 0
      begin
      set @PARAMETERDEFINITION = @PARAMETERDEFINITION + @SECURITYPARAMETERS;

      if @UPDATESQL &lt;&gt; '' begin
      exec sp_executesql @UPDATESQL, @PARAMETERDEFINITION,  @STARTDATEPARAMETER = @STARTDATE, @COMMENTPARAMETER = @COMMENT, @CHANGEAGENTIDPARAMETER = @CHANGEAGENTID, @CURRENTDATEPARAMETER = @CURRENTDATE, @VALUEPARAMETER = @HOURMINUTEVALUE, @CURRENTAPPUSERIDPARAMETER = @CURRENTAPPUSERID, @BPIDPARAMETER = @BPID, @BYPASSSECURITYPARAMETER = @BYPASSSECURITY, @BYPASSSITESECURITYPARAMETER = @BYPASSSITESECURITY;
      set @NUMBEREDITED = @@ROWCOUNT;
      end

      exec sp_executesql @INSERTSQL, @PARAMETERDEFINITION,  @STARTDATEPARAMETER = @STARTDATE, @COMMENTPARAMETER = @COMMENT, @CHANGEAGENTIDPARAMETER = @CHANGEAGENTID, @CURRENTDATEPARAMETER = @CURRENTDATE, @VALUEPARAMETER = @HOURMINUTEVALUE, @CURRENTAPPUSERIDPARAMETER = @CURRENTAPPUSERID, @BPIDPARAMETER = @BPID, @BYPASSSECURITYPARAMETER = @BYPASSSECURITY, @BYPASSSITESECURITYPARAMETER = @BYPASSSITESECURITY;
      set @NUMBERADDED = @@ROWCOUNT;

      end

      else
      begin
      if @UPDATESQL &lt;&gt; '' begin
      exec sp_executesql @UPDATESQL, @PARAMETERDEFINITION,  @STARTDATEPARAMETER = @STARTDATE, @COMMENTPARAMETER = @COMMENT, @CHANGEAGENTIDPARAMETER = @CHANGEAGENTID, @CURRENTDATEPARAMETER = @CURRENTDATE, @VALUEPARAMETER = @HOURMINUTEVALUE;
      set @NUMBEREDITED = @@ROWCOUNT;
      end

      exec sp_executesql @INSERTSQL, @PARAMETERDEFINITION,  @STARTDATEPARAMETER = @STARTDATE, @COMMENTPARAMETER = @COMMENT, @CHANGEAGENTIDPARAMETER = @CHANGEAGENTID, @CURRENTDATEPARAMETER = @CURRENTDATE, @VALUEPARAMETER = @HOURMINUTEVALUE;
      set @NUMBERADDED = @@ROWCOUNT;
      end
      end

      else if @DATATYPE = 9
      begin
      set @PARAMETERDEFINITION = @PARAMETERDEFINITION + ', @VALUEPARAMETER nvarchar(max)';

      if @BYPASSSECURITY = 0 or @BYPASSSITESECURITY = 0
      begin
      set @PARAMETERDEFINITION = @PARAMETERDEFINITION + @SECURITYPARAMETERS;

      if @UPDATESQL &lt;&gt; '' begin
      exec sp_executesql @UPDATESQL, @PARAMETERDEFINITION,  @STARTDATEPARAMETER = @STARTDATE, @COMMENTPARAMETER = @COMMENT, @CHANGEAGENTIDPARAMETER = @CHANGEAGENTID, @CURRENTDATEPARAMETER = @CURRENTDATE, @VALUEPARAMETER = @MEMOVALUE, @CURRENTAPPUSERIDPARAMETER = @CURRENTAPPUSERID, @BPIDPARAMETER = @BPID, @BYPASSSECURITYPARAMETER = @BYPASSSECURITY, @BYPASSSITESECURITYPARAMETER = @BYPASSSITESECURITY;
      set @NUMBEREDITED = @@ROWCOUNT;
      end

      exec sp_executesql @INSERTSQL, @PARAMETERDEFINITION,  @STARTDATEPARAMETER = @STARTDATE, @COMMENTPARAMETER = @COMMENT, @CHANGEAGENTIDPARAMETER = @CHANGEAGENTID, @CURRENTDATEPARAMETER = @CURRENTDATE, @VALUEPARAMETER = @MEMOVALUE, @CURRENTAPPUSERIDPARAMETER = @CURRENTAPPUSERID, @BPIDPARAMETER = @BPID, @BYPASSSECURITYPARAMETER = @BYPASSSECURITY, @BYPASSSITESECURITYPARAMETER = @BYPASSSITESECURITY;
      set @NUMBERADDED = @@ROWCOUNT;

      end

      else
      begin
      if @UPDATESQL &lt;&gt; '' begin
      exec sp_executesql @UPDATESQL, @PARAMETERDEFINITION,  @STARTDATEPARAMETER = @STARTDATE, @COMMENTPARAMETER = @COMMENT, @CHANGEAGENTIDPARAMETER = @CHANGEAGENTID, @CURRENTDATEPARAMETER = @CURRENTDATE, @VALUEPARAMETER = @MEMOVALUE;
      set @NUMBEREDITED = @@ROWCOUNT;
      end

      exec sp_executesql @INSERTSQL, @PARAMETERDEFINITION,  @STARTDATEPARAMETER = @STARTDATE, @COMMENTPARAMETER = @COMMENT, @CHANGEAGENTIDPARAMETER = @CHANGEAGENTID, @CURRENTDATEPARAMETER = @CURRENTDATE, @VALUEPARAMETER = @MEMOVALUE;
      set @NUMBERADDED = @@ROWCOUNT;
      end
      end

      if @SELECTION &lt;&gt; '' begin
      set @SELECTIONTABLESQL = 'drop table ' + @SELECTION;
      exec sp_executesql @SELECTIONTABLESQL
      end
      end try

      begin catch
      if @SELECTION &lt;&gt; '' begin
      set @SELECTIONTABLESQL = 'drop table ' + @SELECTION;
      exec sp_executesql @SELECTIONTABLESQL
      end

      exec dbo.USP_RAISE_ERROR;
      return 1;
      end catch

    </CreateProcedureSQL>
    <ExpectedDBExceptions>
      <CustomExceptions xmlns="bb_appfx_commontypes">
        <Exception SearchText="UFN_IDSETREADER_GETRESULTS_GUID">
          <CustomErrorMsg>An invalid selection was specified for this global change.</CustomErrorMsg>
        </Exception>
      </CustomExceptions>
    </ExpectedDBExceptions>
    <ParametersFormMetaData>
      <FormMetaData xmlns="bb_appfx_commontypes">
        <FormFields>
          <FormField FieldID="IDSETREGISTERID" DataType="Guid" Caption="Selection" CaptionResourceKey="$$selection">
            <SearchList SearchListID="98d0070e-c4a7-495b-a438-2ac12da79068" EnableQuickFind="true">
              <FormFieldOverrides>
                <FormFieldOverride FieldID="RECORDTYPEID" Caption="Record type" ReadOnly="true" DefaultValueText="Fields!RECORDTYPEID" />
              </FormFieldOverrides>
            </SearchList>
          </FormField>
          <FormField FieldID="RECORDTYPEID" DataType="Guid" ReadOnly="true" Hidden="true" />
          <FormField FieldID="ATTRIBUTECATEGORYID" DataType="Guid" Required="true" Caption="Category" CaptionResourceKey="$$category">
            <SimpleDataList SimpleDataListID="958132a3-762a-4844-b7a1-f3a3098da95a">
              <Params>
                <Param ID="RECORDTYPE">
                  <Value>Constituent</Value>
                </Param>
              </Params>
            </SimpleDataList>
          </FormField>
          <FormField FieldID="STRINGVALUE" MaxLength="250" Caption="Value (string)" CaptionResourceKey="$$value" />
          <FormField FieldID="NUMBERVALUE" DataType="Integer" Caption="Value (int)" CaptionResourceKey="$$value" />
          <FormField FieldID="MONEYVALUE" DataType="Money" Caption="Value (money)" CaptionResourceKey="$$value">
            <CurrencyField CurrencyFieldID="CURRENCYID" />
          </FormField>
          <FormField FieldID="DATEVALUE" DataType="Date" Caption="Value (date)" CaptionResourceKey="$$value" />
          <FormField FieldID="BOOLEANVALUE" DataType="TinyInt" Caption="Value (bool)" CaptionResourceKey="$$value">
            <ValueList>
              <Items>
                <Item>
                  <Value>0</Value>
                  <Label>No</Label>
                </Item>
                <Item>
                  <Value>1</Value>
                  <Label>Yes</Label>
                </Item>
              </Items>
            </ValueList>
          </FormField>
          <FormField FieldID="CODETABLEVALUE" DataType="Guid" Caption="Value (code table guid)" CaptionResourceKey="$$value">
            <CodeTable CodeTableName="ADDRESSTYPECODE" />
          </FormField>
          <FormField FieldID="FUZZYDATEVALUE" DataType="FuzzyDate" Caption="Value (fuzzydate)" CaptionResourceKey="$$value" />
          <FormField FieldID="CONSTITUENTIDVALUE" DataType="Guid" Caption="Value (const guid)" CaptionResourceKey="$$value">
            <SearchList SearchListID="23c5c603-d7d8-4106-aecc-65392b563887" EnableQuickFind="true">
              <AddDataForms>
                <AddDataForm ID="1986f0cf-efb6-48b3-afde-950b57562434" Caption="Individual" CaptionResourceKey="$$individual" />
                <AddDataForm ID="d846a816-46c7-470e-9ad0-973b2730e836" Caption="Household" CaptionResourceKey="$$household" />
                <AddDataForm ID="f0f6426a-fccd-48bb-846b-eb3d1a4a0ed4" Caption="Group" CaptionResourceKey="$$group" />
                <AddDataForm ID="ca3ed110-a5f0-4b5b-8eb7-0616e0a82e8e" Caption="Organization" CaptionResourceKey="$$organization" />
              </AddDataForms>
            </SearchList>
          </FormField>
          <FormField FieldID="HOURMINUTEVALUE" DataType="HourMinute" Caption="Value (HourMinute)" CaptionResourceKey="$$value" />
          <FormField FieldID="MEMOVALUE" Caption="Value (Memo - no type)" CaptionResourceKey="$$value" />
          <FormField FieldID="ATTRIBUTECATEGORIES" ReadOnly="true" AvailableToClient="false">
            <Collection>
              <Fields>
                <FormField FieldID="ID" DataType="Guid" Caption="ID" CaptionResourceKey="$$id" />
                <FormField FieldID="DATATYPECODE" DataType="Integer" Caption="DATATYPECODE" CaptionResourceKey="$$datatypecode" />
                <FormField FieldID="CONSTITUENTSEARCHLISTCATALOGID" DataType="Guid" Caption="CONSTITUENTSEARCHLISTCATALOGID" CaptionResourceKey="$$constituentsearchlistcatalogid" />
                <FormField FieldID="CODETABLENAME" Caption="CODETABLENAME" CaptionResourceKey="$$codetablename" />
              </Fields>
            </Collection>
          </FormField>
          <FormField FieldID="STARTDATE" DataType="Date" Caption="Start Date" CaptionResourceKey="$$start_date" Hidden="false" />
          <FormField FieldID="COMMENT" MaxLength="255" Caption="Comment" CaptionResourceKey="$$comment" />
          <FormField FieldID="REMOVEUNQUALIFIED" DataType="Boolean" Caption="Remove value from unqualified records" CaptionResourceKey="$$remove_value_from_unqualified_records" />
          <FormField FieldID="OVERWRITEEXISTINGVALUE" DataType="Boolean" Caption="Overwrite existing value" DefaultValueText="true" CaptionResourceKey="$$overwrite_existing_value" />
          <FormField FieldID="CURRENCYID" DataType="Guid" Caption="Currency" CaptionResourceKey="$$currency">
            <SimpleDataList SimpleDataListID="13612288-b37e-409d-ba52-6ab31637ddd6" />
          </FormField>
        </FormFields>

        <WebUIComponent>
            <UIModel AssemblyName="Heifer_CustomFX_GlobalChanges_Catalog.dll" ClassName="Heifer_CustomFX_GlobalChanges_Catalog.AddAnyConstituentAttributeWStartDateUIModel" />
            <WebUI>
                <DefaultWebUI />
            </WebUI>
        </WebUIComponent>
        <!--<WebUIComponent>
          <UIModel AssemblyName="Blackbaud.AppFx.Constituent.UIModel.dll" ClassName="Blackbaud.AppFx.Constituent.UIModel.AddConstituentAttributeUIModel" />
          <WebUI>
            <ExternalResource Url="browser/htmlforms/constituent/AddConstituentAttribute.html" />
          </WebUI>
        </WebUIComponent>-->
        
        <UIFields>
          <FormField FieldID="UIVALUEFIELD" Hidden="true" Caption="Value" AvailableToClient="false" />
        </UIFields>
      </FormMetaData>
    </ParametersFormMetaData>
  </GlobalChangeSpec>