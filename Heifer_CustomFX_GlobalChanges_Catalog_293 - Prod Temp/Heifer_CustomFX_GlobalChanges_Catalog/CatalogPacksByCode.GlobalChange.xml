<GlobalChangeSpec
xmlns="bb_appfx_globalchange"
xmlns:common="bb_appfx_commontypes"
ID="dcabea1a-104a-407f-a79b-fd540c738e4d"
Name="Catalog Revenue Packs By Code Global Change"
Description="Combine quantities of catalog revenue item (honor cards) into 5 and 25 packs for processing. Based on revenue selection."
Author="HEIFERNET\khamling"
DisplayName="Catalog Revenue Packs By Code Global Change"
GlobalChangeFolder="Revenue"
SPName="USR_USP_GLOBALCHANGE_CATALOGREVENUEPACKS_BYCODE"
>

  <!-- describe the SP that performs the global change operation -->
  <CreateProcedureSQL>
    <![CDATA[
create procedure dbo.USR_USP_GLOBALCHANGE_CATALOGREVENUEPACKS_BYCODE
(

	@CHANGEAGENTID uniqueidentifier = null,
	@ASOF as datetime = null,
	@NUMBERADDED int = 0 output,
	@NUMBEREDITED int = 0 output,
	@NUMBERDELETED int = 0 output,
  @CATALOGREVENUESELECTIONID UNIQUEIDENTIFIER,
  @MYCATALOGCODE VARCHAR(30),
  @MY5PACKCODE VARCHAR(30),
  @MY10PACKCODE VARCHAR(30),
  @MY25PACKCODE VARCHAR(30)
)
as			
	set nocount off;
	
  declare @I_MAX integer
	declare @CURRENTDATE datetime
  declare @PACK5 uniqueidentifier
  declare @PACK10 uniqueidentifier
  declare @PACK25 uniqueidentifier
	set @CURRENTDATE = getdate();
	set @NUMBERADDED = 0;
	set @NUMBEREDITED = 0;
	set @NUMBERDELETED = 0; 
	
	if @CHANGEAGENTID is null
		exec dbo.USP_CHANGEAGENT_GETORCREATECHANGEAGENT @CHANGEAGENTID output;
					
	begin try
		-- do the global change operation here, and set @NUMBERADDED, @NUMBEREDITED, and/or @NUMBERDELETED as appropriate
    
      set @PACK5 = (select id from usr_catalogitemattribute where catalogcode=@MY5PACKCODE)
      set @PACK10 = (select id from usr_catalogitemattribute where catalogcode=@MY10PACKCODE)
      set @PACK25 = (select id from usr_catalogitemattribute where catalogcode=@MY25PACKCODE)     
      
      DECLARE @CATALOGREVENUESELECTION TABLE (id UNIQUEIDENTIFIER PRIMARY KEY); 

      INSERT INTO @CATALOGREVENUESELECTION 
      SELECT id 
      FROM   dbo.Ufn_idsetreader_getresults_guid(@CATALOGREVENUESELECTIONID) 
      
     declare @T table
    (
      PK int identity(1,1), 
      CATALOGREVENUEID uniqueidentifier, 
      CATALOGCODE nvarchar(50), 
      INITIALQUANTITY integer,
			CHANGEAGENTID uniqueidentifier,
			CHANGEDATE datetime
    )
    declare @I int = 1
    
    -- insert records that meet criteria
    insert into @T 
	    select 
        CR.ID, CIA.CATALOGCODE, CR.QUANTITY, CR.CHANGEDBYID, CR.DATECHANGED
      from dbo.USR_CATALOGREVENUE CR
	      inner join dbo.USR_CATALOGITEMATTRIBUTE CIA on cia.id = cr.catalogitemattributeid
        inner join dbo.REVENUE R on R.id = cr.revenueid
        inner join @CATALOGREVENUESELECTION SelectionResults on SelectionResults.ID = r.ID
	    where
        cia.catalogcode=@MYCATALOGCODE
        -- if cr.quantity is not >= 5, then it's already been processed or doesn't need to be processed
        and cr.quantity >= 5
	    
    select @I_MAX = count(*) from @T
    
    declare @CATALOGREVENUEID uniqueidentifier
    declare @CATALOGCODE nvarchar(50)
    declare @INITIALQUANTITY integer
    declare @CATALOGREVENUECHANGEAGENTID uniqueidentifier
    declare @CHANGEDATE datetime
    -- declare variables for calculated quantities
    declare @QUANTITY1 integer
    declare @QUANTITY5 integer
    declare @QUANTITY10 integer
    declare @QUANTITY25 integer    
    --declare @FIVEPACKSONLY bit = 0
    declare @DO25 bit = 0
    declare @DO10 bit = 0
    declare @DO5 bit = 0
    
    if ltrim(rtrim(@MY25PACKCODE)) <> ''
    begin
      set @DO25 = 1
    end
    if ltrim(rtrim(@MY10PACKCODE)) <> ''
    begin
      set @DO10 = 1
    end
    if ltrim(rtrim(@MY5PACKCODE)) <> ''
    begin
      set @DO5 = 1
    end
        
		--BEGIN LOOPING THROUGH TABLE DEFINED ABOVE
    if (@DO5=1) or (@DO10=1) or (@DO25=1)
    begin
      while @I <= @I_MAX
	    begin 		
			  select 
          @CATALOGREVENUEID = CATALOGREVENUEID,
          @CATALOGCODE = CATALOGCODE,
          @INITIALQUANTITY = INITIALQUANTITY,
          @CATALOGREVENUECHANGEAGENTID = CHANGEAGENTID,
          @CHANGEDATE = CHANGEDATE,
          --@QUANTITY25 = abs(INITIALQUANTITY/25),
          --@QUANTITY5 = (INITIALQUANTITY%25/5),
          @QUANTITY1 = INITIALQUANTITY%5
        from 
          @T 
        where 
          PK = @I
               
        if @DO25 = 1  --DO25
        begin
          set @QUANTITY25 = abs(@INITIALQUANTITY/25)
          if @DO10 = 1  -- DO25, DO10
          begin
            set @QUANTITY10 = abs(@INITIALQUANTITY%25/10)
            if @DO5 = 1  --DO25, DO10, DO5
            begin
                set @QUANTITY5 = abs(((@INITIALQUANTITY%25)%10) / 5)
            end
            else  --DO25, DO10, NOT DO5
            begin
              set @QUANTITY5 = 0
            end
          end
          else -- DO25 and NOT DO10 
          begin
            set @QUANTITY10 = 0
            if @DO5 = 1  --DO25, NOT DO10, DO5
            begin
              set @QUANTITY5 = (@INITIALQUANTITY%25/5)
            end
            else  --DO25, NOT DO10, NOT DO5
            begin
              set @QUANTITY5 = 0
            end 
          end    
        end
        else  -- NOT DO25  
        begin
          set @QUANTITY25 = 0
          if @DO10 = 1  -- NOT DO25, DO10          
          begin
            set @QUANTITY10 = abs(@INITIALQUANTITY/10)
            if @DO5 = 1  --NOT DO25, DO10, DO5
            begin
              set @QUANTITY5 = abs(@INITIALQUANTITY%10/5)
            end
            else  --NOT DO25, DO10, NOT DO5
            begin
              set @QUANTITY5 = 0
            end          
          end
          else  -- MOT DO25 and NOT DO10 
          begin 
            set @QUANTITY10 = 0
            if @DO5 = 1  --NOT DO25, NOT DO10, DO5
            begin
              set @QUANTITY5 = abs(@INITIALQUANTITY/5)
            end
            else  --NOT DO25, NOT DO10, NOT DO5
            begin
              set @QUANTITY5 = 0
            end 
          end                        
        end
        ----------------------------------------------------------------------------------------------------------------------------
        -- create new CATALOGREVENUE records with new codes and correct quantities, which were calculated in SELECT statement above.
        ----------------------------------------------------------------------------------------------------------------------------
        if @CATALOGCODE = @MYCATALOGCODE  --will always be true unless insert/select is changed to pull other codes above.
        --question: Do I need to adjust price or fairmarket? No per Ted
        begin
          begin try     
            set @NUMBEREDITED = @NUMBEREDITED + 1;
            ------------

            if @QUANTITY25 > 0
            begin
              insert into USR_CATALOGREVENUE
              (
               --ID,
               TRANSACTIONID,
               CATALOGITEMATTRIBUTEID,
               QUANTITY,
               PRICE,
               FAIRMARKET,
               ADDEDBYID,
               CHANGEDBYID,
               DATEADDED,
               DATECHANGED,
               --TS,
               --TSLONG,
               FULFILLED,
               REVENUEID,
               ADDRESSID,
               SHIPTONAME,
               TAXAMOUNT,
               CATALOGITEMID,
               CATALOGTYPEID,
               FROMNAME,
               SHIPTOFIRSTNAME,
               SHIPTOLASTNAME,
               SHIPTOADDRESS1,
               SHIPTOADDRESS2,
               SHIPTOCITY,
               SHIPTOSTATEID,
               SHIPTOCOUNTRYID,
               SHIPTOZIP,
               SHIPPINGOPTION,
               SHIPPINGPRICE,
               SHIPPINGATTENTION,
               SHIPPINGINSTRUCTIONS,
               PERSONALNOTE,
               SHIPPINGPRICEACTUAL,
               SHIPDATE,
               ISSHIPPED,
               TRACKINGNUMBER,
               FULFILLMENTNUMBER
               )
               select
               --ID,
               TRANSACTIONID,
               --following id is Honor Card 25 pack
               @PACK25,
               @QUANTITY25,
               PRICE,
               FAIRMARKET,
               ADDEDBYID,
               CHANGEDBYID,
               DATEADDED,
               DATECHANGED,
               --TS,
               --TSLONG,
               FULFILLED,
               REVENUEID,
               ADDRESSID,
               SHIPTONAME,
               TAXAMOUNT,
               CATALOGITEMID,
               CATALOGTYPEID,
               FROMNAME,
               SHIPTOFIRSTNAME,
               SHIPTOLASTNAME,
               SHIPTOADDRESS1,
               SHIPTOADDRESS2,
               SHIPTOCITY,
               SHIPTOSTATEID,
               SHIPTOCOUNTRYID,
               SHIPTOZIP,
               SHIPPINGOPTION,
               SHIPPINGPRICE,
               SHIPPINGATTENTION,
               SHIPPINGINSTRUCTIONS,
               PERSONALNOTE,
               SHIPPINGPRICEACTUAL,
               SHIPDATE,
               ISSHIPPED,
               TRACKINGNUMBER,
               FULFILLMENTNUMBER               
               from USR_CATALOGREVENUE
               where id = @CATALOGREVENUEID           
            end
            if @QUANTITY10 > 0
            begin
              insert into USR_CATALOGREVENUE
              (
               --ID,
               TRANSACTIONID,
               CATALOGITEMATTRIBUTEID,
               QUANTITY,
               PRICE,
               FAIRMARKET,
               ADDEDBYID,
               CHANGEDBYID,
               DATEADDED,
               DATECHANGED,
               --TS,
               --TSLONG,
               FULFILLED,
               REVENUEID,
               ADDRESSID,
               SHIPTONAME,
               TAXAMOUNT,
               CATALOGITEMID,
               CATALOGTYPEID,
               FROMNAME,
               SHIPTOFIRSTNAME,
               SHIPTOLASTNAME,
               SHIPTOADDRESS1,
               SHIPTOADDRESS2,
               SHIPTOCITY,
               SHIPTOSTATEID,
               SHIPTOCOUNTRYID,
               SHIPTOZIP,
               SHIPPINGOPTION,
               SHIPPINGPRICE,
               SHIPPINGATTENTION,
               SHIPPINGINSTRUCTIONS,
               PERSONALNOTE,
               SHIPPINGPRICEACTUAL,
               SHIPDATE,
               ISSHIPPED,
               TRACKINGNUMBER,
               FULFILLMENTNUMBER
               )
               select
               --ID,
               TRANSACTIONID,
               --following id is Honor Card 10 pack
               @PACK10,
               @QUANTITY10,
               PRICE,
               FAIRMARKET,
               ADDEDBYID,
               CHANGEDBYID,
               DATEADDED,
               DATECHANGED,
               --TS,
               --TSLONG,
               FULFILLED,
               REVENUEID,
               ADDRESSID,
               SHIPTONAME,
               TAXAMOUNT,
               CATALOGITEMID,
               CATALOGTYPEID,
               FROMNAME,
               SHIPTOFIRSTNAME,
               SHIPTOLASTNAME,
               SHIPTOADDRESS1,
               SHIPTOADDRESS2,
               SHIPTOCITY,
               SHIPTOSTATEID,
               SHIPTOCOUNTRYID,
               SHIPTOZIP,
               SHIPPINGOPTION,
               SHIPPINGPRICE,
               SHIPPINGATTENTION,
               SHIPPINGINSTRUCTIONS,
               PERSONALNOTE,
               SHIPPINGPRICEACTUAL,
               SHIPDATE,
               ISSHIPPED,
               TRACKINGNUMBER,
               FULFILLMENTNUMBER               
               from USR_CATALOGREVENUE
               where id = @CATALOGREVENUEID           
            end
            if @QUANTITY5 > 0
            begin
              insert into USR_CATALOGREVENUE
              (
               --ID,
               TRANSACTIONID,
               CATALOGITEMATTRIBUTEID,
               QUANTITY,
               PRICE,
               FAIRMARKET,
               ADDEDBYID,
               CHANGEDBYID,
               DATEADDED,
               DATECHANGED,
               --TS,
               --TSLONG,
               FULFILLED,
               REVENUEID,
               ADDRESSID,
               SHIPTONAME,
               TAXAMOUNT,
               CATALOGITEMID,
               CATALOGTYPEID,
               FROMNAME,
               SHIPTOFIRSTNAME,
               SHIPTOLASTNAME,
               SHIPTOADDRESS1,
               SHIPTOADDRESS2,
               SHIPTOCITY,
               SHIPTOSTATEID,
               SHIPTOCOUNTRYID,
               SHIPTOZIP,
               SHIPPINGOPTION,
               SHIPPINGPRICE,
               SHIPPINGATTENTION,
               SHIPPINGINSTRUCTIONS,
               PERSONALNOTE,
               SHIPPINGPRICEACTUAL,
               SHIPDATE,
               ISSHIPPED,
               TRACKINGNUMBER,
               FULFILLMENTNUMBER
               )
               select
               --ID,
               TRANSACTIONID,
               --following id is Honor Card 5 pack
               @PACK5,
               @QUANTITY5,
               PRICE,
               FAIRMARKET,
               ADDEDBYID,
               CHANGEDBYID,
               DATEADDED,
               DATECHANGED,
               --TS,
               --TSLONG,
               FULFILLED,
               REVENUEID,
               ADDRESSID,
               SHIPTONAME,
               TAXAMOUNT,
               CATALOGITEMID,
               CATALOGTYPEID,
               FROMNAME,
               SHIPTOFIRSTNAME,
               SHIPTOLASTNAME,
               SHIPTOADDRESS1,
               SHIPTOADDRESS2,
               SHIPTOCITY,
               SHIPTOSTATEID,
               SHIPTOCOUNTRYID,
               SHIPTOZIP,
               SHIPPINGOPTION,
               SHIPPINGPRICE,
               SHIPPINGATTENTION,
               SHIPPINGINSTRUCTIONS,
               PERSONALNOTE,
               SHIPPINGPRICEACTUAL,
               SHIPDATE,
               ISSHIPPED,
               TRACKINGNUMBER,
               FULFILLMENTNUMBER               
               from USR_CATALOGREVENUE
               where id = @CATALOGREVENUEID           
            end

            -- question: Do I need to delete record or just set quantity to zero
            -- decision made to delete
            if @QUANTITY1 > 0 
            begin
              update USR_CATALOGREVENUE
              set
               QUANTITY = @QUANTITY1        
               where id = @CATALOGREVENUEID 
            end  
            else
            begin
              delete from usr_CATALOGREVENUE
              where id = @CATALOGREVENUEID
            end
            
            ------------
          end try
	        begin catch
		        exec dbo.USP_RAISE_ERROR;
		        return 1;
	        end catch
        end
		    set @I = @I + 1   		
	    end
      --END LOOPING THROUGH TABLE DEFINED ABOVE
    end
	end try	
	begin catch
		exec dbo.USP_RAISE_ERROR;
		return 1;
	end catch
		]]>
  </CreateProcedureSQL>

  <ParametersFormMetaData>
    <common:FormMetaData>
      <common:FormFields>
        <common:FormField FieldID="CATALOGREVENUESELECTIONID" Caption="Catalog Revenue Selection" DataType="Guid" Required="true" >
          <common:SearchList SearchListID="1F0E603C-1C55-4E1E-8218-BDB877B2CBE8">
          </common:SearchList>
        </common:FormField>
        <common:FormField FieldID="MYCATALOGCODE" Caption="Honor Card Code" DataType="String" Required="true" >
        </common:FormField>
        <!--Due to time constraints, if we make 5 packs not required, I need to go back and calculate QUANTITY1, since QUANTITY1 calculation assumes 5 packs are always used-->
        <common:FormField FieldID="MY5PACKCODE" Caption="5 Pack Code" DataType="String" Required="true" >
        </common:FormField>
        <common:FormField FieldID="MY10PACKCODE" Caption="10 Pack Code (if available)" DataType="String" Required="false" />
        <common:FormField FieldID="MY25PACKCODE" Caption="25 Pack Code (if available)" DataType="String" Required="false" />
      </common:FormFields>
      <common:WebUIComponent>
        <common:WebUI>
          <common:DefaultWebUI />
        </common:WebUI>
      </common:WebUIComponent>
    </common:FormMetaData>
  </ParametersFormMetaData>

</GlobalChangeSpec>
